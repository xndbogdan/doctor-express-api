datasource db {
  provider = "postgresql" // or your preferred database provider
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Doctor {
  id                 Int                @id @default(autoincrement())
  username           String             @unique
  first_name         String
  last_name          String
  email              String             @unique
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  slots              Slot[]
  recurring_patterns RecurringPattern[]
  bookings           Booking[]
}

model Patient {
  id         Int       @id @default(autoincrement())
  first_name String
  last_name  String
  email      String    @unique
  phone      String?
  bookings   Booking[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model RecurringPattern {
  id         Int       @id @default(autoincrement())
  doctor     Doctor    @relation(fields: [doctorId], references: [id])
  doctorId   Int
  start_time DateTime // Time of day (e.g., 10:00)
  end_time   DateTime // Time of day (e.g., 10:30)
  duration   Int // Duration in minutes (15 or 30)
  type       String // "daily", "weekly", "one-time"
  week_days  Int[] // For weekly: [1,3,5] = Mon, Wed, Fri (1=Mon, 7=Sun)
  start_date DateTime // First date this pattern applies
  end_date   DateTime? // Last date this pattern applies (optional)
  is_active  Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  slots      Slot[]
}

model Slot {
  id         Int               @id @default(autoincrement())
  doctor     Doctor            @relation(fields: [doctorId], references: [id])
  doctorId   Int
  pattern    RecurringPattern? @relation(fields: [patternId], references: [id])
  patternId  Int?
  start_time DateTime
  end_time   DateTime
  status     String            @default("available")
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  booking    Booking?
}

model Booking {
  id           Int      @id @default(autoincrement())
  slot         Slot     @relation(fields: [slotId], references: [id])
  slotId       Int      @unique
  patient      Patient  @relation(fields: [patientId], references: [id])
  patientId    Int
  doctor       Doctor   @relation(fields: [doctorId], references: [id])
  doctorId     Int
  reason       String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}
